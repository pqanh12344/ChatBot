import streamlit as st
from data_loader import load_documents, chunk_documents
from embeddings import create_embeddings, load_model
from chatbot import chatbot_rag
from config import logger

def main():
    st.set_page_config(page_title="Chatbot", page_icon="ü§ñ", layout="wide")
    
    # Th√™m CSS t√πy ch·ªânh
    st.markdown("""
        <style>
        .stTextInput > div > div > input {
            border-radius: 10px;
            padding: 10px;
        }
        .stButton > button {
            background-color: #4CAF50;
            color: white;
            border-radius: 10px;
        }
        .stExpander {
            background-color: #f9f9f9;
            border-radius: 5px;
        }
        </style>
    """, unsafe_allow_html=True)

    st.title("Chatbot")
    st.write("H·ªèi b·∫•t k·ª≥ c√¢u h·ªèi n√†o!")

    # Kh·ªüi t·∫°o d·ªØ li·ªáu v√† m√¥ h√¨nh n·∫øu ch∆∞a c√≥
    if 'initialized' not in st.session_state:
        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu v√† m√¥ h√¨nh..."):
            try:
                contexts, questions, answers = load_documents()
                st.session_state.chunks, st.session_state.metadata = chunk_documents(contexts, questions, answers)
                st.session_state.embeddings = create_embeddings(st.session_state.chunks)
                st.session_state.model = load_model()
                st.session_state.initialized = True
            except Exception as e:
                st.error(f"Kh·ªüi t·∫°o th·∫•t b·∫°i: {e}")
                logger.error(f"Initialization error: {e}")
                return

    # Kh·ªüi t·∫°o l·ªãch s·ª≠ tr√≤ chuy·ªán
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []

    # N√∫t x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán
    if st.button("X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán"):
        st.session_state.chat_history = []
        st.success("ƒê√£ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán.")

    # Form nh·∫≠p c√¢u h·ªèi
    with st.form(key='question_form'):
        query = st.text_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:", placeholder="V√≠ d·ª•: T√™n g·ªçi n√†o ƒë∆∞·ª£c Ph·∫°m VƒÉn ƒê·ªìng s·ª≠ d·ª•ng khi l√†m Ph√≥ ch·ªß nhi·ªám c∆° quan Bi·ªán s·ª± x·ª© t·∫°i Qu·∫ø L√¢m?")
        submit_button = st.form_submit_button(label="G·ª≠i c√¢u h·ªèi")

    if submit_button and query:
        with st.spinner("ƒêang x·ª≠ l√Ω c√¢u h·ªèi..."):
            answer, source = chatbot_rag(
                query,
                st.session_state.chunks,
                st.session_state.embeddings,
                st.session_state.metadata,
                st.session_state.model
            )
            st.session_state.chat_history.append({"question": query, "answer": answer, "source": source})
            st.subheader("C√¢u tr·∫£ l·ªùi:")
            st.markdown(f"**{answer}**")

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán
    if st.session_state.chat_history:
        st.subheader("L·ªãch s·ª≠ tr√≤ chuy·ªán")
        for i, chat in enumerate(reversed(st.session_state.chat_history)):
            with st.expander(f"C√¢u h·ªèi {len(st.session_state.chat_history) - i}: {chat['question']}"):
                st.markdown(f"**Tr·∫£ l·ªùi**: {chat['answer']}")
                # st.write(f"**Ngu·ªìn**: {chat['source']}")

if __name__ == "__main__":
    main()